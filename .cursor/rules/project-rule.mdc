---
alwaysApply: true
---
#####
Title: MCP backend Tools Writing

Applies to: All Tasks

Rule:
You will be writing the MCP tools withing a well defined project structure and test process with the below step by step process.

1. Project Structure

We are writing the plain python cli script inside /opt/mycode/promode/promodeagro-mcp/scripts/actors, where each scripts define the usecases fo a particular actor. These cli scripts directly talk with dynamodb and execute db operations for usecases.When the scripts works totally fine , then we convert those scripts as MCP tools so that outside world can call those tools. 

2. MCP Tools structure
-For each MCP tool , we create a toolname-tool.py file inside src/tools/
-The service for that tool is implemented inside src/service/toolname-service.py
-The model for that tool is implemented inside src/models/toolname-model.py
-Any utility file is written inside src/utils
-config is written inside src/config

For every Tool, we need to add Tool support in src/server.py and inside the wrappers mcp_http_server.py, /opt/mycode/promode/promodeagro-mcp/mcp_stdio_server.py

3. Test Structure of the Tools
- After writing every tool, we write pytest for every source files of the tool, say tool file, service file , model file
- Then we modify the test scripts inside testscripts/tool-data , update them , they are basically the metadata for all tools
- Then for every Tool , we write curl based test scripts inside testscripts/tools-test/

4. Document update for the Tools
- For every tool update , we update the testscripts/tool-data/README_MCP_TOOLS.md and main readme README.md

