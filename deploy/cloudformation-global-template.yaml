AWSTemplateFormatVersion: '2010-09-09'
Description: 'Global Resources for E-commerce MCP Server - Region-specific resources like SSL certificates'

Parameters:
  ProjectName:
    Type: String
    Description: 'Name of the project (e.g., ecommerce-mcp)'
    Default: 'ecommerce-mcp'
  
  Environment:
    Type: String
    Description: 'Environment name (dev, stage, prod)'
    Default: 'dev'
    AllowedValues:
      - dev
      - stage
      - prod
  
  BaseDomain:
    Type: String
    Description: 'Base domain name (e.g., promodeagro.com)'
    Default: 'promodeagro.com'
  
  Subdomain:
    Type: String
    Description: 'Subdomain for the environment'
    Default: 'api-dev'
  
  HostedZoneId:
    Type: String
    Description: 'Route53 Hosted Zone ID for the base domain'
    Default: 'Z084501638STQ2EKKSIA'
  
  CreateSSLCertificate:
    Type: String
    Description: 'Create SSL certificate for the domain'
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'

Conditions:
  ShouldCreateSSLCertificate: !Equals [!Ref CreateSSLCertificate, 'true']
  IsUSEast1: !Equals [!Ref 'AWS::Region', 'us-east-1']

Resources:
  # SSL Certificate for API (only if requested)
  ApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: ShouldCreateSSLCertificate
    Properties:
      DomainName: !Sub '${Subdomain}.${BaseDomain}'
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub '${Subdomain}.${BaseDomain}'
          ValidationDomain: !Ref BaseDomain
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-api-cert-${Environment}'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Global IAM Role for cross-region access
  GlobalServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-global-service-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ecs-tasks.amazonaws.com
                - ecs.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: CrossRegionAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                  - s3:GetObjectVersion
                Resource: '*'
                Condition:
                  StringEquals:
                    'aws:RequestedRegion': !Ref 'AWS::Region'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: '*'
                Condition:
                  StringEquals:
                    'aws:RequestedRegion': !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-global-service-role-${Environment}'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Global CloudWatch Log Group
  GlobalLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/global/${ProjectName}-${Environment}'
      RetentionInDays: 30
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

Outputs:
  StackName:
    Description: 'Global stack name'
    Value: !Ref 'AWS::StackName'

  ApiCertificateArn:
    Condition: ShouldCreateSSLCertificate
    Description: 'API SSL certificate ARN'
    Value: !Ref ApiCertificate
    Export:
      Name: !Sub '${ProjectName}-api-cert-arn-${Environment}'

  GlobalServiceRoleArn:
    Description: 'Global service role ARN'
    Value: !GetAtt GlobalServiceRole.Arn
    Export:
      Name: !Sub '${ProjectName}-global-service-role-arn-${Environment}'

  GlobalLogGroupName:
    Description: 'Global CloudWatch log group name'
    Value: !Ref GlobalLogGroup
    Export:
      Name: !Sub '${ProjectName}-global-log-group-${Environment}'

  Region:
    Description: 'AWS Region for this deployment'
    Value: !Ref 'AWS::Region'
    Export:
      Name: !Sub '${ProjectName}-region-${Environment}'
